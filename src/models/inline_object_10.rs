/*
 * VRChat API Documentation
 *
 *
 * Contact: me@ruby.js.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct InlineObject10 {
    #[serde(rename = "assetUrl", skip_serializing_if = "Option::is_none")]
    pub asset_url: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    #[serde(rename = "imageUrl")]
    pub image_url: String,
    #[serde(rename = "releaseStatus", skip_serializing_if = "Option::is_none")]
    pub release_status: Option<crate::models::ReleaseStatus>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<f32>,
    #[serde(rename = "unityPackageUrl", skip_serializing_if = "Option::is_none")]
    pub unity_package_url: Option<String>,
}

impl InlineObject10 {
    pub fn new(name: String, image_url: String) -> InlineObject10 {
        InlineObject10 {
            asset_url: None,
            id: None,
            name,
            description: None,
            tags: None,
            image_url,
            release_status: None,
            version: None,
            unity_package_url: None,
        }
    }
}


