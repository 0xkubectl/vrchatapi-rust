/*
 * VRChat API Documentation
 *
 *
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CreateInstanceRequest {
    /// WorldID be \"offline\" on User profiles if you are not friends with that user.
    #[serde(rename = "worldId")]
    pub world_id: String,
    #[serde(rename = "type")]
    pub r#type: crate::models::InstanceType,
    #[serde(rename = "region")]
    pub region: crate::models::Region,
    /// A groupId if the instance type is \"group\", null if instance type is public, or a userId otherwise
    #[serde(rename = "ownerId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub owner_id: Option<Option<String>>,
    /// Group roleIds that are allowed to join if the type is \"group\" and groupAccessType is \"member\"
    #[serde(rename = "roleIds", skip_serializing_if = "Option::is_none")]
    pub role_ids: Option<Vec<String>>,
    #[serde(rename = "groupAccessType", skip_serializing_if = "Option::is_none")]
    pub group_access_type: Option<crate::models::GroupAccessType>,
    #[serde(rename = "queueEnabled", skip_serializing_if = "Option::is_none")]
    pub queue_enabled: Option<bool>,
    /// The time after which users won't be allowed to join the instance
    #[serde(rename = "closedAt", skip_serializing_if = "Option::is_none")]
    pub closed_at: Option<String>,
}

impl CreateInstanceRequest {
    pub fn new(world_id: String, r#type: crate::models::InstanceType, region: crate::models::Region) -> CreateInstanceRequest {
        CreateInstanceRequest {
            world_id,
            r#type,
            region,
            owner_id: None,
            role_ids: None,
            group_access_type: None,
            queue_enabled: None,
            closed_at: None,
        }
    }
}


